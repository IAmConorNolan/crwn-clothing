{"ast":null,"code":"import { takeEvery, call, put } from 'redux-saga/effects';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport ShopActionTypes from './shop.types';\nimport { fetchCollectionSuccess, fetchCollectionFail } from './shop.actions';\nexport function* fetchCollectionAsync() {\n  try {\n    const collectionRef = firestore.collection('collections');\n    const snapshot = yield collectionRef.get();\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot); // we use call here just so that redux saga has more control here.\n\n    yield put(fetchCollectionSuccess(collectionsMap)); //put is the same as dispatch, in saga.\n  } catch (error) {\n    yield put(fetchCollectionFail(error));\n  }\n}\n;\nexport function* fetchCollectionStart() {\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, //Stop everytime this action is fired, run fetchCollectionAsync\n  fetchCollectionAsync);\n}\n;","map":{"version":3,"sources":["C:\\Users\\Conor\\Desktop\\React Course\\crwn-clothing\\client\\src\\redux\\shop\\shop.sagas.js"],"names":["takeEvery","call","put","firestore","convertCollectionsSnapshotToMap","ShopActionTypes","fetchCollectionSuccess","fetchCollectionFail","fetchCollectionAsync","collectionRef","collection","snapshot","get","collectionsMap","error","fetchCollectionStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAAUA,SAAV,EAAqBC,IAArB,EAA2BC,GAA3B,QAAsC,oBAAtC;AACA,SAAQC,SAAR,EAAmBC,+BAAnB,QAAyD,+BAAzD;AACA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SACAC,sBADA,EAEAC,mBAFA,QAGO,gBAHP;AAKA,OAAO,UAAUC,oBAAV,GAAiC;AACpC,MAAI;AACA,UAAMC,aAAa,GAAGN,SAAS,CAACO,UAAV,CAAqB,aAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,cAAc,GAAG,MAAMZ,IAAI,CAACG,+BAAD,EAAkCO,QAAlC,CAAjC,CAHA,CAG+E;;AAC/E,UAAMT,GAAG,CAACI,sBAAsB,CAACO,cAAD,CAAvB,CAAT,CAJA,CAImD;AACtD,GALD,CAKE,OAAOC,KAAP,EAAc;AACZ,UAAMZ,GAAG,CAACK,mBAAmB,CAACO,KAAD,CAApB,CAAT;AACH;AACJ;AAAA;AAGD,OAAO,UAAUC,oBAAV,GAAiC;AACpC,QAAMf,SAAS,CAACK,eAAe,CAACW,uBAAjB,EAA0C;AACzDR,EAAAA,oBADe,CAAf;AAEH;AAAA","sourcesContent":["import  { takeEvery, call, put } from 'redux-saga/effects';\r\nimport {firestore, convertCollectionsSnapshotToMap} from '../../firebase/firebase.utils';\r\nimport ShopActionTypes from './shop.types';\r\nimport {\r\nfetchCollectionSuccess,\r\nfetchCollectionFail\r\n} from './shop.actions';\r\n\r\nexport function* fetchCollectionAsync() {\r\n    try {\r\n        const collectionRef = firestore.collection('collections');\r\n        const snapshot = yield collectionRef.get();\r\n        const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot);  // we use call here just so that redux saga has more control here.\r\n        yield put(fetchCollectionSuccess(collectionsMap)); //put is the same as dispatch, in saga.\r\n    } catch (error) {\r\n        yield put(fetchCollectionFail(error));\r\n    }\r\n};\r\n \r\n\r\nexport function* fetchCollectionStart() {\r\n    yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, //Stop everytime this action is fired, run fetchCollectionAsync\r\n    fetchCollectionAsync ) \r\n};"]},"metadata":{},"sourceType":"module"}